{"version":3,"file":"api-types.js","sourceRoot":"","sources":["../../src/api-types.ts"],"names":[],"mappings":";AAAA;;;;;GAKG","sourcesContent":["/**\n * Notion API Types\n *\n * This file contains type definitions for common object types across various interfaces in the Notion API.\n * In the future, the contents of this file will be generated from an API definition.\n */\n\nimport { PropertyValueMap } from \"./api-endpoints\"\nimport { DistributiveExtend, DistributiveOmit, RequiredBy } from \"./type-utils\"\n\n/*\n * Pagination\n */\n\nexport interface PaginationParameters {\n  start_cursor?: string\n  page_size?: number\n}\n\nexport interface PaginatedList<\n  O extends APISingularObject = APISingularObject\n> {\n  object: \"list\"\n  results: O[]\n  has_more: boolean\n  next_cursor: string | null\n}\n\n/*\n * API Objects\n */\n\nexport type APIObject = APISingularObject | PaginatedList\nexport type APISingularObject = Database | Page | User | Block\n\n/*\n * Block (outputs)\n */\n\n// TODO: need an input version of this type. maybe reuse DistributiveOmit. but what about RichText id's?\n\nexport type Block =\n  | ParagraphBlock\n  | HeadingOneBlock\n  | HeadingTwoBlock\n  | HeadingThreeBlock\n  | BulletedListItemBlock\n  | NumberedListItemBlock\n  | ToDoBlock\n  | ToggleBlock\n  | ChildPageBlock\n  | UnsupportedBlock\n\nexport interface BlockBase {\n  object: \"block\"\n  id: string\n  type: string\n  created_time: string\n  last_edited_time: string\n  has_children: boolean\n}\n\nexport interface ParagraphBlock extends BlockBase {\n  type: \"paragraph\"\n  paragraph: {\n    text: RichText[]\n    children?: Block[]\n  }\n}\n\nexport interface HeadingOneBlock extends BlockBase {\n  type: \"heading_1\"\n  heading_1: { text: RichText[] }\n  has_children: false\n}\n\nexport interface HeadingTwoBlock extends BlockBase {\n  type: \"heading_2\"\n  heading_2: { text: RichText[] }\n  has_children: false\n}\n\nexport interface HeadingThreeBlock extends BlockBase {\n  type: \"heading_3\"\n  heading_3: { text: RichText[] }\n  has_children: false\n}\n\nexport interface BulletedListItemBlock extends BlockBase {\n  type: \"bulleted_list_item\"\n  bulleted_list_item: {\n    text: RichText[]\n    children?: Block[]\n  }\n}\n\nexport interface NumberedListItemBlock extends BlockBase {\n  type: \"numbered_list_item\"\n  numbered_list_item: {\n    text: RichText[]\n    children?: Block[]\n  }\n}\n\nexport interface ToDoBlock extends BlockBase {\n  type: \"to_do\"\n  to_do: {\n    text: RichText[]\n    checked: boolean\n    children?: Block[]\n  }\n}\n\nexport interface ToggleBlock extends BlockBase {\n  type: \"toggle\"\n  toggle: {\n    text: RichText[]\n    children?: Block[]\n  }\n}\n\nexport interface ChildPageBlock extends BlockBase {\n  type: \"child_page\"\n  child_page: { title: string }\n}\n\nexport interface UnsupportedBlock extends BlockBase {\n  type: \"unsupported\"\n}\n\n/*\n * Database (outputs)\n */\n\nexport interface Database {\n  object: \"database\"\n  id: string\n  created_time: string\n  last_edited_time: string\n  title: RichText[]\n  properties: { [propertyName: string]: Property }\n}\n\n/*\n * Property (outputs)\n */\n\nexport type Property =\n  | TitleProperty\n  | RichTextProperty\n  | NumberProperty\n  | SelectProperty\n  | MultiSelectProperty\n  | DateProperty\n  | PeopleProperty\n  | FileProperty\n  | CheckboxProperty\n  | URLProperty\n  | EmailProperty\n  | PhoneNumberProperty\n  | FormulaProperty\n  | RelationProperty\n  | RollupProperty\n  | CreatedTimeProperty\n  | CreatedByProperty\n  | LastEditedTimeProperty\n  | LastEditedByProperty\n\nexport interface PropertyBase {\n  id: string\n  type: string\n}\n\nexport interface TitleProperty extends PropertyBase {\n  type: \"title\"\n  title: Record<string, never>\n}\n\nexport interface RichTextProperty extends PropertyBase {\n  type: \"rich_text\"\n  rich_text: Record<string, never>\n}\n\nexport interface NumberProperty extends PropertyBase {\n  type: \"number\"\n  number: {\n    format:\n      | \"number\"\n      | \"number_with_commas\"\n      | \"percent\"\n      | \"dollar\"\n      | \"euro\"\n      | \"pound\"\n      | \"yen\"\n      | \"ruble\"\n      | \"rupee\"\n      | \"won\"\n      | \"yuan\"\n  }\n}\n\nexport interface SelectProperty extends PropertyBase {\n  type: \"select\"\n  select: { options: SelectOption[] }\n}\n\nexport interface MultiSelectProperty extends PropertyBase {\n  type: \"multi_select\"\n  multi_select: {\n    options: MultiSelectOption[]\n  }\n}\n\nexport interface DateProperty extends PropertyBase {\n  type: \"date\"\n  date: Record<string, never>\n}\n\nexport interface PeopleProperty extends PropertyBase {\n  type: \"people\"\n  people: Record<string, never>\n}\n\nexport interface FileProperty extends PropertyBase {\n  type: \"file\"\n  file: Record<string, never>\n}\n\nexport interface CheckboxProperty extends PropertyBase {\n  type: \"checkbox\"\n  checkbox: Record<string, never>\n}\n\nexport interface URLProperty extends PropertyBase {\n  type: \"url\"\n  url: Record<string, never>\n}\n\nexport interface EmailProperty extends PropertyBase {\n  type: \"email\"\n  email: Record<string, never>\n}\n\nexport interface PhoneNumberProperty extends PropertyBase {\n  type: \"phone_number\"\n  phone_number: Record<string, never>\n}\n\nexport interface FormulaProperty extends PropertyBase {\n  type: \"formula\"\n  formula: {\n    expression: string\n  }\n}\n\nexport interface RelationProperty extends PropertyBase {\n  type: \"relation\"\n  relation: {\n    database_id: string\n    synced_property_name?: string\n    synced_property_id?: string\n  }\n}\n\nexport interface RollupProperty extends PropertyBase {\n  type: \"rollup\"\n  rollup: {\n    relation_property_name: string\n    relation_property_id: string\n    rollup_property_name: string\n    rollup_property_id: string\n    function:\n      | \"count_all\"\n      | \"count_values\"\n      | \"count_unique_values\"\n      | \"count_empty\"\n      | \"count_not_empty\"\n      | \"percent_empty\"\n      | \"percent_not_empty\"\n      | \"sum\"\n      | \"average\"\n      | \"median\"\n      | \"min\"\n      | \"max\"\n      | \"range\"\n  }\n}\n\nexport interface CreatedTimeProperty extends PropertyBase {\n  type: \"created_time\"\n  created_time: Record<string, never>\n}\n\nexport interface CreatedByProperty extends PropertyBase {\n  type: \"created_by\"\n  created_by: Record<string, never>\n}\n\nexport interface LastEditedTimeProperty extends PropertyBase {\n  type: \"last_edited_time\"\n  last_edited_time: Record<string, never>\n}\n\nexport interface LastEditedByProperty extends PropertyBase {\n  type: \"last_edited_by\"\n  last_edited_by: Record<string, never>\n}\n\n/*\n * User (output)\n */\n\nexport type User = PersonUser | BotUser\n\nexport interface UserBase {\n  object: \"user\"\n  id: string\n  type?: string\n  name?: string\n  avatar_url?: string\n}\n\nexport interface PersonUser extends UserBase {\n  type?: \"person\"\n  person?: {\n    email: string\n  }\n}\n\nexport interface BotUser extends UserBase {\n  type?: \"bot\"\n}\n\n/*\n * Misc (output)\n */\n\nexport interface SelectOption {\n  name: string\n  id: string\n  color: Color\n}\n\nexport type MultiSelectOption = SelectOption\n\nexport interface SearchSort {\n  direction: \"ascending\" | \"descending\"\n  timestamp: \"last_edited_time\"\n}\n\nexport interface SearchFilter {\n  value: \"page\" | \"database\"\n  property: \"object\"\n}\n\nexport type Color =\n  | \"default\"\n  | \"gray\"\n  | \"brown\"\n  | \"orange\"\n  | \"yellow\"\n  | \"green\"\n  | \"blue\"\n  | \"purple\"\n  | \"pink\"\n  | \"red\"\nexport type BackgroundColor =\n  | \"gray_background\"\n  | \"brown_background\"\n  | \"orange_background\"\n  | \"yellow_background\"\n  | \"green_background\"\n  | \"blue_background\"\n  | \"purple_background\"\n  | \"pink_background\"\n  | \"red_background\"\n\n/*\n * Filter (input)\n */\n\nexport type Filter = SinglePropertyFilter | CompoundFilter\n\nexport type SinglePropertyFilter =\n  | TextFilter\n  | NumberFilter\n  | CheckboxFilter\n  | SelectFilter\n  | MultiSelectFilter\n  | DateFilter\n  | PeopleFilter\n  | FilesFilter\n  | RelationFilter\n  | FormulaFilter\n\nexport interface CompoundFilter {\n  or?: Filter[]\n  and?: Filter[]\n}\n\nexport interface SinglePropertyFilterBase {\n  property: string\n}\n\n/** A text filter condition applies to database properties of types \"title\", \"rich_text\", \"url\", \"email\", and \"phone\". */\nexport interface TextFilter extends SinglePropertyFilterBase {\n  text: {\n    equals?: string\n    does_not_equal?: string\n    contains?: string\n    does_not_contain?: string\n    starts_with?: string\n    ends_with?: string\n    is_empty?: true\n    is_not_empty?: true\n  }\n}\n\nexport interface NumberFilter extends SinglePropertyFilterBase {\n  number: {\n    equals?: number\n    does_not_equal?: number\n    greater_than?: number\n    less_than?: number\n    greater_than_or_equal_to?: number\n    less_than_or_equal_to?: number\n    is_empty?: true\n    is_not_empty?: true\n  }\n}\n\nexport interface CheckboxFilter extends SinglePropertyFilterBase {\n  checkbox: {\n    equals?: boolean\n    does_not_equal?: boolean\n  }\n}\n\nexport interface SelectFilter extends SinglePropertyFilterBase {\n  select: {\n    equals?: string\n    does_not_equal?: string\n    is_empty?: true\n    is_not_empty?: true\n  }\n}\n\nexport interface MultiSelectFilter extends SinglePropertyFilterBase {\n  multi_select: {\n    contains?: string\n    does_not_contain?: string\n    is_empty?: true\n    is_not_empty?: true\n  }\n}\n\nexport interface DateFilter extends SinglePropertyFilterBase {\n  date: {\n    equals?: string\n    before?: string\n    after?: string\n    on_or_before?: string\n    is_empty?: true\n    is_not_empty?: true\n    on_or_after?: string\n    past_week?: Record<string, never>\n    past_month?: Record<string, never>\n    past_year?: Record<string, never>\n    next_week?: Record<string, never>\n    next_month?: Record<string, never>\n    next_year?: Record<string, never>\n  }\n}\n\nexport interface PeopleFilter extends SinglePropertyFilterBase {\n  people: {\n    contains?: string\n    does_not_contain?: string\n    is_empty?: true\n    is_not_empty?: true\n  }\n}\n\nexport interface FilesFilter extends SinglePropertyFilterBase {\n  files: {\n    is_empty?: true\n    is_not_empty?: true\n  }\n}\n\nexport interface RelationFilter extends SinglePropertyFilterBase {\n  relation: {\n    contains?: string\n    does_not_contain?: string\n    is_empty?: true\n    is_not_empty?: true\n  }\n}\n\nexport interface FormulaFilter extends SinglePropertyFilterBase {\n  formula: {\n    text?: Omit<TextFilter, \"property\">\n    checkbox?: Omit<CheckboxFilter, \"property\">\n    number?: Omit<NumberFilter, \"property\">\n    date?: Omit<DateFilter, \"property\">\n  }\n}\n\n/*\n * Sort (input)\n */\n\nexport interface Sort {\n  property?: string\n  timestamp?: \"created_time\" | \"last_edited_time\"\n  direction: \"ascending\" | \"descending\"\n}\n\n/*\n * Page\n */\n\nexport interface Page {\n  object: \"page\"\n  id: string\n  parent: Parent\n  created_time: string\n  last_edited_time: string\n  archived: boolean\n  properties: PropertyValueMap\n}\n\n/*\n * Parent\n */\n\nexport type Parent = DatabaseParent | PageParent | WorkspaceParent\nexport type ParentInput =\n  | Omit<DatabaseParent, \"type\">\n  | Omit<PageParent, \"type\">\n// TODO: use DistributiveOmit?\n\nexport interface DatabaseParent {\n  type: \"database_id\"\n  database_id: string\n}\n\nexport interface PageParent {\n  type: \"page_id\"\n  page_id: string\n}\n\nexport interface WorkspaceParent {\n  type: \"workspace\"\n}\n\n/*\n * PropertyValue\n */\n\nexport type PropertyValue =\n  | TitlePropertyValue\n  | RichTextPropertyValue\n  | NumberPropertyValue\n  | SelectPropertyValue\n  | MultiSelectPropertyValue\n  | DatePropertyValue\n  | FormulaPropertyValue\n  | RollupPropertyValue\n  | PeoplePropertyValue\n  | FilesPropertyValue\n  | CheckboxPropertyValue\n  | URLPropertyValue\n  | EmailPropertyValue\n  | PhoneNumberPropertyValue\n  | CreatedTimePropertyValue\n  | CreatedByPropertyValue\n  | LastEditedTimePropertyValue\n  | LastEditedByPropertyValue\n\nexport type PropertyValueWithoutId = DistributiveOmit<PropertyValue, \"id\">\n\nexport type InputPropertyValue = DistributiveExtend<\n  DistributiveOmit<InputPropertyValueWithRequiredId, \"id\">,\n  { id?: string }\n>\n\n// NOTE(blackmad): there are probably still sub-types in here that need to be made\n// more permissive when used for input\nexport type InputPropertyValueWithRequiredId =\n  | TitleInputPropertyValue\n  | RichTextInputPropertyValue\n  | NumberPropertyValue\n  | SelectPropertyValue\n  | MultiSelectPropertyValue\n  | DatePropertyValue\n  | FormulaPropertyValue\n  | RollupPropertyValue\n  | PeoplePropertyValue\n  | FilesPropertyValue\n  | CheckboxPropertyValue\n  | URLPropertyValue\n  | EmailPropertyValue\n  | PhoneNumberPropertyValue\n  | CreatedTimePropertyValue\n  | CreatedByPropertyValue\n  | LastEditedTimePropertyValue\n  | LastEditedByPropertyValue\n\nexport interface PropertyValueBase {\n  id: string\n  type: string\n}\n\nexport interface TitlePropertyValue extends PropertyValueBase {\n  type: \"title\"\n  title: RichText[]\n}\n\nexport interface RichTextPropertyValue extends PropertyValueBase {\n  type: \"rich_text\"\n  rich_text: RichText[]\n}\n\nexport interface TitleInputPropertyValue extends PropertyValueBase {\n  type: \"title\"\n  title: RichTextInput[]\n}\n\nexport interface RichTextInputPropertyValue extends PropertyValueBase {\n  type: \"rich_text\"\n  rich_text: RichTextInput[]\n}\n\nexport interface NumberPropertyValue extends PropertyValueBase {\n  type: \"number\"\n  number: number\n}\n\nexport interface SelectPropertyValue extends PropertyValueBase {\n  type: \"select\"\n  select: SelectOption\n}\n\nexport interface MultiSelectPropertyValue extends PropertyValueBase {\n  type: \"multi_select\"\n  multi_select: MultiSelectOption[]\n}\n\nexport interface DatePropertyValue extends PropertyValueBase {\n  type: \"date\"\n  date: {\n    start: string\n    end?: string\n  }\n}\n\nexport interface FormulaPropertyValue extends PropertyValueBase {\n  type: \"formula\"\n  formula:\n    | StringFormulaValue\n    | NumberFormulaValue\n    | BooleanFormulaValue\n    | DateFormulaValue\n}\n\nexport interface StringFormulaValue {\n  type: \"string\"\n  string?: string\n}\nexport interface NumberFormulaValue {\n  type: \"number\"\n  number?: number\n}\nexport interface BooleanFormulaValue {\n  type: \"boolean\"\n  boolean: boolean\n}\nexport interface DateFormulaValue {\n  type: \"date\"\n  date: DatePropertyValue\n}\n\nexport interface RollupPropertyValue extends PropertyValueBase {\n  type: \"rollup\"\n  rollup: NumberRollupValue | DateRollupValue | ArrayRollupValue\n}\n\nexport interface NumberRollupValue {\n  type: \"number\"\n  number: number\n}\nexport interface DateRollupValue {\n  type: \"date\"\n  date: DatePropertyValue\n}\nexport interface ArrayRollupValue {\n  type: \"array\"\n  array: PropertyValueWithoutId[]\n}\n\nexport interface PeoplePropertyValue extends PropertyValueBase {\n  type: \"people\"\n  people: User[]\n}\n\nexport interface FilesPropertyValue extends PropertyValueBase {\n  type: \"files\"\n  files: { name: string }[]\n}\n\nexport interface CheckboxPropertyValue extends PropertyValueBase {\n  type: \"checkbox\"\n  checkbox: boolean\n}\n\nexport interface URLPropertyValue extends PropertyValueBase {\n  type: \"url\"\n  url: string\n}\n\nexport interface EmailPropertyValue extends PropertyValueBase {\n  type: \"email\"\n  email: string\n}\n\nexport interface PhoneNumberPropertyValue extends PropertyValueBase {\n  type: \"phone_number\"\n  phone_number: string\n}\n\nexport interface CreatedTimePropertyValue extends PropertyValueBase {\n  type: \"created_time\"\n  created_time: string\n}\n\nexport interface CreatedByPropertyValue extends PropertyValueBase {\n  type: \"created_by\"\n  created_by: User\n}\n\nexport interface LastEditedTimePropertyValue extends PropertyValueBase {\n  type: \"last_edited_time\"\n  last_edited_time: string\n}\n\nexport interface LastEditedByPropertyValue extends PropertyValueBase {\n  type: \"last_edited_by\"\n  last_edited_by: User\n}\n\n/*\n * Rich text object (output)\n */\nexport type RichText = RichTextText | RichTextMention | RichTextEquation\nexport type RichTextInput =\n  | RichTextTextInput\n  | RichTextMention\n  | RichTextEquation\n\nexport interface RichTextBaseInput {\n  plain_text?: string\n  href?: string\n  annotations?: Annotations\n  type: string\n}\n\nexport interface RichTextTextInput extends RichTextBaseInput {\n  type: \"text\"\n  text: {\n    content: string\n    link?: { type: \"url\"; url: string }\n  }\n}\n\nexport type RichTextBase = RequiredBy<\n  RichTextBaseInput,\n  \"plain_text\" | \"annotations\"\n>\nexport type RichTextText = RequiredBy<\n  RichTextTextInput,\n  \"plain_text\" | \"annotations\"\n>\nexport interface RichTextMention extends RichTextBase {\n  type: \"mention\"\n  mention: UserMention | PageMention | DatabaseMention | DateMention\n}\n\nexport interface UserMention {\n  type: \"user\"\n  user: User\n}\n\nexport interface PageMention {\n  type: \"page\"\n  page: { id: string }\n}\n\nexport interface DatabaseMention {\n  type: \"database\"\n  database: { id: string }\n}\n\nexport interface DateMention {\n  type: \"date\"\n  date: DatePropertyValue\n}\n\nexport interface RichTextEquation extends RichTextBase {\n  type: \"equation\"\n  equation: {\n    expression: string\n  }\n}\n\nexport interface Annotations {\n  bold: boolean\n  italic: boolean\n  strikethrough: boolean\n  underline: boolean\n  code: boolean\n  color: Color | BackgroundColor\n}\n"]}