{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IncomingHttpHeaders } from \"http\"\nimport type {\n  HTTPError as GotHTTPError,\n  TimeoutError as GotTimeoutError,\n  Response as GotResponse,\n} from \"got\"\nimport { isObject } from \"./helpers\"\n\nexport class RequestTimeoutError extends Error {\n  readonly code = \"notionhq_client_request_timeout\"\n\n  constructor(message = \"Request to Notion API has timed out\") {\n    super(message)\n    this.name = \"RequestTimeoutError\"\n  }\n\n  static isRequestTimeoutError(error: unknown): error is RequestTimeoutError {\n    return (\n      error instanceof Error &&\n      error.name === \"RequestTimeoutError\" &&\n      \"code\" in error &&\n      error[\"code\"] === RequestTimeoutError.prototype.code\n    )\n  }\n}\n\nexport class HTTPResponseError extends Error {\n  readonly code: string = \"notionhq_client_response_error\"\n  readonly status: number\n  readonly headers: IncomingHttpHeaders\n  readonly body: string\n\n  constructor(response: GotResponse, message?: string) {\n    super(\n      message ??\n        `Request to Notion API failed with status: ${response.statusCode}`\n    )\n    this.name = \"HTTPResponseError\"\n    this.status = response.statusCode\n    this.headers = response.headers\n    this.body = response.rawBody.toString()\n  }\n\n  static isHTTPResponseError(error: unknown): error is HTTPResponseError {\n    return (\n      error instanceof Error &&\n      error.name === \"HTTPResponseError\" &&\n      \"code\" in error &&\n      error[\"code\"] === HTTPResponseError.prototype.code\n    )\n  }\n}\n\n/**\n * Error codes for responses from the API.\n */\nexport enum APIErrorCode {\n  Unauthorized = \"unauthorized\",\n  RestrictedResource = \"restricted_resource\",\n  ObjectNotFound = \"object_not_found\",\n  RateLimited = \"rate_limited\",\n  InvalidJSON = \"invalid_json\",\n  InvalidRequestURL = \"invalid_request_url\",\n  InvalidRequest = \"invalid_request\",\n  ValidationError = \"validation_error\",\n  ConflictError = \"conflict_error\",\n  InternalServerError = \"internal_server_error\",\n  ServiceUnavailable = \"service_unavailable\",\n}\n\n/**\n * Body of an error response from the API.\n */\ninterface APIErrorResponseBody {\n  code: APIErrorCode\n  message: string\n}\n\n/**\n * A response from the API indicating a problem.\n *\n * Use the `code` property to handle various kinds of errors. All its possible values are in `APIErrorCode`.\n */\nexport class APIResponseError\n  extends HTTPResponseError\n  implements APIErrorResponseBody\n{\n  readonly code: APIErrorCode\n\n  constructor(response: GotResponse, body: APIErrorResponseBody) {\n    super(response, body.message)\n    this.name = \"APIResponseError\"\n    this.code = body.code\n  }\n\n  static isAPIResponseError(error: unknown): error is APIResponseError {\n    return (\n      error instanceof Error &&\n      error.name === \"APIResponseError\" &&\n      \"code\" in error &&\n      isAPIErrorCode(error[\"code\"])\n    )\n  }\n}\n\ntype RequestError = RequestTimeoutError | HTTPResponseError\n\nexport function buildRequestError(error: unknown): RequestError | undefined {\n  if (isGotTimeoutError(error)) {\n    return new RequestTimeoutError()\n  }\n  if (isGotHTTPError(error)) {\n    const apiErrorResponseBody = parseAPIErrorResponseBody(error.response.body)\n    if (apiErrorResponseBody !== undefined) {\n      return new APIResponseError(error.response, apiErrorResponseBody)\n    }\n    return new HTTPResponseError(error.response)\n  }\n  return\n}\n\nfunction parseAPIErrorResponseBody(\n  body: unknown\n): APIErrorResponseBody | undefined {\n  if (typeof body !== \"string\") {\n    return\n  }\n\n  let parsed\n  try {\n    parsed = JSON.parse(body)\n  } catch (parseError) {\n    return\n  }\n\n  if (\n    !isObject(parsed) ||\n    typeof parsed[\"message\"] !== \"string\" ||\n    !isAPIErrorCode(parsed[\"code\"])\n  ) {\n    return\n  }\n\n  return {\n    ...parsed,\n    code: parsed[\"code\"],\n    message: parsed[\"message\"],\n  }\n}\n\n/*\n * Type guards\n */\n\nfunction isAPIErrorCode(code: unknown): code is APIErrorCode {\n  return (\n    typeof code === \"string\" &&\n    Object.values<string>(APIErrorCode).includes(code)\n  )\n}\n\nfunction isGotTimeoutError(error: unknown): error is GotTimeoutError {\n  return (\n    error instanceof Error &&\n    error.name === \"TimeoutError\" &&\n    \"event\" in error &&\n    typeof error[\"event\"] === \"string\" &&\n    isObject(error[\"request\"]) &&\n    isObject(error[\"timings\"])\n  )\n}\n\nfunction isGotHTTPError(error: unknown): error is GotHTTPError {\n  return (\n    error instanceof Error &&\n    error.name === \"HTTPError\" &&\n    \"request\" in error &&\n    isObject(error[\"request\"]) &&\n    \"response\" in error &&\n    isObject(error[\"response\"]) &&\n    \"timings\" in error &&\n    isObject(error[\"timings\"])\n  )\n}\n"]}