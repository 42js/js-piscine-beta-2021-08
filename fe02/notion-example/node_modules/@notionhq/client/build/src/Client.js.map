{"version":3,"file":"Client.js","sourceRoot":"","sources":["../../src/Client.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Agent } from \"http\"\nimport { URL } from \"url\"\nimport {\n  Logger,\n  LogLevel,\n  logLevelSeverity,\n  makeConsoleLogger,\n} from \"./logging\"\nimport { buildRequestError, HTTPResponseError } from \"./errors\"\nimport { pick } from \"./helpers\"\nimport {\n  BlocksChildrenAppendParameters,\n  BlocksChildrenAppendResponse,\n  blocksChildrenAppend,\n  BlocksChildrenListParameters,\n  BlocksChildrenListResponse,\n  blocksChildrenList,\n  DatabasesListParameters,\n  DatabasesListResponse,\n  databasesList,\n  DatabasesQueryResponse,\n  DatabasesQueryParameters,\n  databasesQuery,\n  DatabasesRetrieveParameters,\n  DatabasesRetrieveResponse,\n  databasesRetrieve,\n  PagesCreateParameters,\n  PagesCreateResponse,\n  pagesCreate,\n  PagesRetrieveParameters,\n  PagesRetrieveResponse,\n  pagesRetrieve,\n  PagesUpdateParameters,\n  PagesUpdateResponse,\n  pagesUpdate,\n  UsersListParameters,\n  UsersListResponse,\n  usersList,\n  UsersRetrieveParameters,\n  UsersRetrieveResponse,\n  usersRetrieve,\n  SearchParameters,\n  SearchResponse,\n  search,\n} from \"./api-endpoints\"\n\nimport got, {\n  Got,\n  Options as GotOptions,\n  Headers as GotHeaders,\n  Agents as GotAgents,\n} from \"got\"\n\nexport interface ClientOptions {\n  auth?: string\n  timeoutMs?: number\n  baseUrl?: string\n  logLevel?: LogLevel\n  logger?: Logger\n  agent?: Agent\n  notionVersion?: string\n}\n\nexport interface RequestParameters {\n  path: string\n  method: Method\n  query?: QueryParams\n  body?: Record<string, unknown>\n  auth?: string\n}\n\nexport default class Client {\n  #auth?: string\n  #logLevel: LogLevel\n  #logger: Logger\n  #got: Got\n\n  static readonly defaultNotionVersion = \"2021-05-13\"\n\n  public constructor(options?: ClientOptions) {\n    this.#auth = options?.auth\n    this.#logLevel = options?.logLevel ?? LogLevel.WARN\n    this.#logger = options?.logger ?? makeConsoleLogger(this.constructor.name)\n\n    const prefixUrl = (options?.baseUrl ?? \"https://api.notion.com\") + \"/v1/\"\n    const timeout = options?.timeoutMs ?? 60_000\n    const notionVersion = options?.notionVersion ?? Client.defaultNotionVersion\n\n    this.#got = got.extend({\n      prefixUrl,\n      timeout,\n      headers: {\n        \"Notion-Version\": notionVersion,\n        // TODO: update with format appropriate for telemetry, use version from package.json\n        \"user-agent\": \"notionhq-client/0.1.0\",\n      },\n      retry: 0,\n      agent: makeAgentOption(prefixUrl, options?.agent),\n    })\n  }\n\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n  public async request<Response>({\n    path,\n    method,\n    query,\n    body,\n    auth,\n  }: RequestParameters): Promise<Response> {\n    this.log(LogLevel.INFO, \"request start\", { method, path })\n\n    // If the body is empty, don't send the body in the HTTP request\n    const json =\n      body !== undefined && Object.entries(body).length === 0 ? undefined : body\n\n    try {\n      const response = await this.#got(path, {\n        method,\n        searchParams: query,\n        json,\n        headers: this.authAsHeaders(auth),\n      }).json<Response>()\n\n      this.log(LogLevel.INFO, `request success`, { method, path })\n      return response\n    } catch (error) {\n      // Build an error of a known type, otherwise throw unexpected errors\n      const requestError = buildRequestError(error)\n      if (requestError === undefined) {\n        throw error\n      }\n\n      this.log(LogLevel.WARN, `request fail`, {\n        code: requestError.code,\n        message: requestError.message,\n      })\n      if (HTTPResponseError.isHTTPResponseError(requestError)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(LogLevel.DEBUG, `failed response body`, {\n          body: requestError.body,\n        })\n      }\n\n      // Throw as a known error type\n      throw requestError\n    }\n  }\n\n  /*\n   * Notion API endpoints\n   */\n\n  public readonly blocks = {\n    children: {\n      /**\n       * Append block children\n       */\n      append: (\n        args: WithAuth<BlocksChildrenAppendParameters>\n      ): Promise<BlocksChildrenAppendResponse> => {\n        return this.request<BlocksChildrenAppendResponse>({\n          path: blocksChildrenAppend.path(args),\n          method: blocksChildrenAppend.method,\n          query: pick(args, blocksChildrenAppend.queryParams),\n          body: pick(args, blocksChildrenAppend.bodyParams),\n          auth: args?.auth,\n        })\n      },\n\n      /**\n       * Retrieve block children\n       */\n      list: (\n        args: WithAuth<BlocksChildrenListParameters>\n      ): Promise<BlocksChildrenListResponse> => {\n        return this.request<BlocksChildrenListResponse>({\n          path: blocksChildrenList.path(args),\n          method: blocksChildrenList.method,\n          query: pick(args, blocksChildrenList.queryParams),\n          body: pick(args, blocksChildrenList.bodyParams),\n          auth: args?.auth,\n        })\n      },\n    },\n  }\n\n  public readonly databases = {\n    /**\n     * List databases\n     *\n     * @deprecated Please use `search`\n     */\n    list: (\n      args: WithAuth<DatabasesListParameters> = {}\n    ): Promise<DatabasesListResponse> => {\n      return this.request<DatabasesListResponse>({\n        path: databasesList.path(),\n        method: databasesList.method,\n        query: pick(args, databasesList.queryParams),\n        body: pick(args, databasesList.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a database\n     */\n    retrieve: (\n      args: WithAuth<DatabasesRetrieveParameters>\n    ): Promise<DatabasesRetrieveResponse> => {\n      return this.request<DatabasesRetrieveResponse>({\n        path: databasesRetrieve.path(args),\n        method: databasesRetrieve.method,\n        query: pick(args, databasesRetrieve.queryParams),\n        body: pick(args, databasesRetrieve.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Query a database\n     */\n    query: (\n      args: WithAuth<DatabasesQueryParameters>\n    ): Promise<DatabasesQueryResponse> => {\n      return this.request<DatabasesQueryResponse>({\n        path: databasesQuery.path(args),\n        method: databasesQuery.method,\n        query: pick(args, databasesQuery.queryParams),\n        body: pick(args, databasesQuery.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  public readonly pages = {\n    /**\n     * Create a page\n     */\n    create: (\n      args: WithAuth<PagesCreateParameters>\n    ): Promise<PagesCreateResponse> => {\n      return this.request<PagesCreateResponse>({\n        path: pagesCreate.path(),\n        method: pagesCreate.method,\n        query: pick(args, pagesCreate.queryParams),\n        body: pick(args, pagesCreate.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a page\n     */\n    retrieve: (\n      args: WithAuth<PagesRetrieveParameters>\n    ): Promise<PagesRetrieveResponse> => {\n      return this.request<PagesRetrieveResponse>({\n        path: pagesRetrieve.path(args),\n        method: pagesRetrieve.method,\n        query: pick(args, pagesRetrieve.queryParams),\n        body: pick(args, pagesRetrieve.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update page properties\n     */\n    update: (\n      args: WithAuth<PagesUpdateParameters>\n    ): Promise<PagesUpdateResponse> => {\n      return this.request<PagesUpdateResponse>({\n        path: pagesUpdate.path(args),\n        method: pagesUpdate.method,\n        query: pick(args, pagesUpdate.queryParams),\n        body: pick(args, pagesUpdate.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  public readonly users = {\n    /**\n     * Retrieve a user\n     */\n    retrieve: (\n      args: WithAuth<UsersRetrieveParameters>\n    ): Promise<UsersRetrieveResponse> => {\n      return this.request<UsersRetrieveResponse>({\n        path: usersRetrieve.path(args),\n        method: usersRetrieve.method,\n        query: pick(args, usersRetrieve.queryParams),\n        body: pick(args, usersRetrieve.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * List all users\n     */\n    list: (\n      args: WithAuth<UsersListParameters> = {}\n    ): Promise<UsersListResponse> => {\n      return this.request<UsersListResponse>({\n        path: usersList.path(),\n        method: usersList.method,\n        query: pick(args, usersList.queryParams),\n        body: pick(args, usersList.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  /**\n   * Search\n   */\n  public search(args: WithAuth<SearchParameters>): Promise<SearchResponse> {\n    return this.request<SearchResponse>({\n      path: search.path(),\n      method: search.method,\n      query: pick(args, search.queryParams),\n      body: pick(args, search.bodyParams),\n      auth: args?.auth,\n    })\n  }\n\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  private log(\n    level: LogLevel,\n    message: string,\n    extraInfo: Record<string, unknown>\n  ) {\n    if (logLevelSeverity(level) >= logLevelSeverity(this.#logLevel)) {\n      this.#logger(level, message, extraInfo)\n    }\n  }\n\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  private authAsHeaders(auth?: string): GotHeaders {\n    const headers: GotHeaders = {}\n    const authHeaderValue = auth ?? this.#auth\n    if (authHeaderValue !== undefined) {\n      headers[\"authorization\"] = `Bearer ${authHeaderValue}`\n    }\n    return headers\n  }\n}\n\n/*\n * Type aliases to support the generic request interface.\n */\ntype Method = \"get\" | \"post\" | \"patch\"\ntype QueryParams = GotOptions[\"searchParams\"]\n\ntype WithAuth<P> = P & { auth?: string }\n\n/*\n * Helper functions\n */\n\nfunction makeAgentOption(\n  prefixUrl: string,\n  agent: Agent | undefined\n): GotAgents | undefined {\n  if (agent === undefined) {\n    return undefined\n  }\n  return {\n    [selectProtocol(prefixUrl)]: agent,\n  }\n}\n\nfunction selectProtocol(prefixUrl: string): \"http\" | \"https\" {\n  const url = new URL(prefixUrl)\n\n  if (url.protocol === \"https:\") {\n    return \"https\"\n  } else if (url.protocol === \"http:\") {\n    return \"http\"\n  }\n\n  throw new TypeError(`baseUrl option must begin with \"https://\" or \"http://\"`)\n}\n"]}